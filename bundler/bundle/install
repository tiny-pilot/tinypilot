#!/bin/bash

# Installs TinyPilot and all dependencies.

# Exit on first error.
set -e

# Exit on unset variable.
set -u

# Echo commands to stdout.
set -x

# shellcheck disable=SC1091 # Don’t follow sourced script.
. lib.sh

# HACK: If we let mktemp use the default /tmp directory, the system purges the
# file before the end of the script for some reason. We use /var/tmp as a
# workaround.
readonly TEMP_DIR='/var/tmp'

# Temporary file for installation settings.
INSTALL_SETTINGS_FILE="$(mktemp --tmpdir="${TEMP_DIR}" --suffix .yml)"
readonly INSTALL_SETTINGS_FILE

# The eventual, permanent settings files. Note, that these might not exist
# yet before Ansible has run for the very first time.
readonly TINYPILOT_SETTINGS_FILE='/home/tinypilot/settings.yml'
readonly USTREAMER_SETTINGS_FILE='/home/ustreamer/config.yml'

# The filename of the TinyPilot Debian package.
TINYPILOT_DEBIAN_PACKAGE="$(ls tinypilot*.deb)"
readonly TINYPILOT_DEBIAN_PACKAGE

# Remove temporary files & directories.
clean_up() {
  rm -rf "${INSTALL_SETTINGS_FILE}"
}

# Always clean up before exiting.
trap 'clean_up' EXIT

# Prevent installation on the Raspberry Pi 3.
if grep -q "^Model *: Raspberry Pi 3" /proc/cpuinfo ; then
  echo 'You are trying to install on incompatible hardware.' >&2
  echo 'Visit https://github.com/tiny-pilot/tinypilot/ for more details.' >&2
  exit 1
fi

# Abort installation if the read-only filesystem is enabled
if grep -q "boot=overlay" /proc/cmdline ; then
  echo 'The read-only filesystem is enabled.' >&2
  echo 'Disable the read-only filesystem before proceeding.' >&2
  echo 'See https://tinypilotkvm.com/faq/read-only-filesystem for details.' >&2
  exit 1
fi

# Check if there's already a settings file with extra installation settings.
if [[ -f "${TINYPILOT_SETTINGS_FILE}" ]]; then
  echo "Using settings file at: ${TINYPILOT_SETTINGS_FILE}"
  cp "${TINYPILOT_SETTINGS_FILE}" "${INSTALL_SETTINGS_FILE}"
else
  echo "No pre-existing settings file found at: ${TINYPILOT_SETTINGS_FILE}"
fi

# Set default installation settings
yaml_set_if_undefined "${INSTALL_SETTINGS_FILE}" "ustreamer_port" "8001"
yaml_set_if_undefined "${INSTALL_SETTINGS_FILE}" "ustreamer_persistent" "true"

# Check if this system uses the TC358743 HDMI to CSI capture bridge.
USE_TC358743_DEFAULTS=false
if grep --silent "^ustreamer_capture_device:" "${INSTALL_SETTINGS_FILE}"; then
  if grep --silent "^ustreamer_capture_device: tc358743$" "${INSTALL_SETTINGS_FILE}"; then
    USE_TC358743_DEFAULTS=true
  fi
# Only check the existing config file if user has not set
# ustreamer_capture_device install variable.
elif [ -f "${USTREAMER_SETTINGS_FILE}" ] \
     && grep --silent 'capture_device: "tc358743"' "${USTREAMER_SETTINGS_FILE}"; then
  USE_TC358743_DEFAULTS=true
fi

# Write uStreamer settings.
if "${USE_TC358743_DEFAULTS}"; then
  yaml_set_if_undefined "${INSTALL_SETTINGS_FILE}" "ustreamer_encoder" "omx"
  yaml_set_if_undefined "${INSTALL_SETTINGS_FILE}" "ustreamer_format" "uyvy"
  yaml_set_if_undefined "${INSTALL_SETTINGS_FILE}" "ustreamer_workers" "3"
  yaml_set_if_undefined "${INSTALL_SETTINGS_FILE}" "ustreamer_use_dv_timings" "true"
  yaml_set_if_undefined "${INSTALL_SETTINGS_FILE}" "ustreamer_drop_same_frames" "30"
else
  # If this system does not use a TC358743 capture chip, assume defaults for a
  # MacroSilicon MS2109-based HDMI-to-USB capture dongle.
  yaml_set_if_undefined "${INSTALL_SETTINGS_FILE}" "ustreamer_encoder" "hw"
  yaml_set_if_undefined "${INSTALL_SETTINGS_FILE}" "ustreamer_format" "jpeg"
  yaml_set_if_undefined "${INSTALL_SETTINGS_FILE}" "ustreamer_resolution" "1920x1080"
fi

echo "Final install settings:"
cat "${INSTALL_SETTINGS_FILE}"

# Bootstrap environment for installation.
apt-get update --allow-releaseinfo-change-suite
apt-get install -y \
  git \
  libffi-dev \
  libssl-dev \
  python3-dev \
  python3-venv \
  lsb-release

python3 -m venv venv
# shellcheck disable=SC1091 # Don’t follow sourced script.
. venv/bin/activate
# Ensure we're using a version of pip that can use binary wheels where available
# instead of building the packages locally.
pip install "pip>=21.3.1"
pip install -r requirements.txt

# Run Ansible.
ansible-playbook \
  --inventory localhost, \
  install.yml \
  --extra-vars "@${INSTALL_SETTINGS_FILE}" \
  --extra-vars "tinypilot_debian_package_path=${PWD}/${TINYPILOT_DEBIAN_PACKAGE}"

# Persist installation settings.
cp "${INSTALL_SETTINGS_FILE}" "${TINYPILOT_SETTINGS_FILE}"
chown tinypilot:tinypilot "${TINYPILOT_SETTINGS_FILE}"

# Make the installation settings file world readable so that the uStreamer
# launcher script can access it via a symbolic link.
chmod 0644 "${TINYPILOT_SETTINGS_FILE}"
