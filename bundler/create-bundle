#!/bin/bash

# Creates a TinyPilot installation bundle from the bundle/ folder.
#
# You have to provide the TinyPilot Debian package and place it in the `bundle/`
# folder. The script fetches all other required dependencies automatically.

# Exit on first error.
set -e

# Exit on unset variable.
set -u

# Echo commands to stdout.
set -x

declare -Ar ANSIBLE_TINYPILOT=(
  [repo]='https://github.com/tiny-pilot/ansible-role-tinypilot.git'
  [version]='master'
)
declare -Ar ANSIBLE_NGINX=(
  [repo]='https://github.com/tiny-pilot/ansible-role-nginx'
  [version]='master'
)
declare -Ar ANSIBLE_USTREAMER=(
  [repo]='https://github.com/tiny-pilot/ansible-role-ustreamer'
  [version]='master'
)
readonly ANSIBLE_ROLES=(
  "${ANSIBLE_TINYPILOT[@]}"
  "${ANSIBLE_NGINX[@]}"
  "${ANSIBLE_USTREAMER[@]}"
)

readonly BUNDLE_DIR='bundle'
readonly OUTPUT_DIR='dist'

# Compose bundle file name, which consists of these hyphen-separated parts:
# 1. `tinypilot`
# 2. The TinyPilot variant: `community` or `pro`
# 3. A timestamp (which allows lexical sorting of bundles by their file names).
# 4. The build version: a git commit hash in short form for TinyPilot Community;
#    a SemVer version for TinyPilot Pro.
# Examples for bundle names:
# - `tinypilot-community-20220620T1611Z-acd7316.tgz` (Community)
# - `tinypilot-pro-20220620T1713Z-2.4.1.tgz` (Pro)
TIMESTAMP="$(date --iso-8601=minutes | sed 's/[:-]//g' | sed 's/+0000/Z/g')"
readonly TIMESTAMP
TINYPILOT_VERSION="$(git rev-parse --short HEAD)"
readonly TINYPILOT_VERSION
readonly TINYPILOT_VARIANT='community'
readonly BUNDLE_FILENAME="tinypilot-${TINYPILOT_VARIANT}-${TIMESTAMP}-${TINYPILOT_VERSION}.tgz"

# Enter working directory to set up the bundleâ€™s inner structure.
pushd "${BUNDLE_DIR}"

# Ensure that a TinyPilot Debian package exists.
if ! ls tinypilot*.deb 1> /dev/null 2>&1; then
  echo 'Failed to create bundle: no TinyPilot Debian package found.' >&2
  exit 1
fi

# Copy each Ansible role dependency into the bundle and add a version file.
for (( index=0; index < "${#ANSIBLE_ROLES[@]}"; index+=2 )); do
  REPO="${ANSIBLE_ROLES[${index}]}"
  VERSION=${ANSIBLE_ROLES[${index}+1]}
  git clone \
    --depth 1 \
    --branch "${VERSION}" \
    "${REPO}"
  FOLDER_NAME="$(basename "${REPO}" .git)"
  pushd "${FOLDER_NAME}"
  git rev-parse --short HEAD > VERSION
  popd
done

# Remove all `.git/` folders.
find . \
  -type d \
  -name .git \
  -prune \
  -exec rm -rf {} \;

# Leave working directory to assemble the tarball bundle.
popd

# Generate tarball bundle and meta file.
mkdir -p "${OUTPUT_DIR}"
ls -lahR "${BUNDLE_DIR}" > "${OUTPUT_DIR}/files.txt"
tar \
  --create \
  --gzip \
  --file "${OUTPUT_DIR}/${BUNDLE_FILENAME}" \
  --directory "${BUNDLE_DIR}" \
  .
