#!/bin/bash

# Creates a TinyPilot installation bundle from the bundle/ folder.
#
# You have to provide the TinyPilot Debian package and place it in the `bundle/`
# folder. The script fetches all other required dependencies automatically.

# Exit on first error.
set -e

# Exit on unset variable.
set -u

# Echo commands to stdout.
set -x

readonly REPO_ANSIBLE_TINYPILOT='https://github.com/tiny-pilot/ansible-role-tinypilot.git'
readonly REPO_ANSIBLE_NGINX='https://github.com/tiny-pilot/ansible-role-nginx'
readonly REPO_ANSIBLE_USTREAMER='https://github.com/tiny-pilot/ansible-role-ustreamer'

readonly BUNDLE_DIR='bundle'
readonly OUTPUT_DIR='dist'

# Compose bundle file name. The naming scheme is:
# 1. The TinyPilot variant: `tinypilot` for TinyPilot Community; `tinypilot-pro`
#    for TinyPilot Pro.
# 2. A timestamp (which allows lexical sorting of bundles by their file names).
# 3. The build version: a git commit hash in short form for TinyPilot Community;
#    a SemVer version for TinyPilot Pro.
TIMESTAMP="$(date --iso-8601=minutes | sed 's/[:-]//g' | sed 's/+0000/Z/g')"
readonly TIMESTAMP
TINYPILOT_VERSION="$(git rev-parse --short HEAD)"
readonly TINYPILOT_VERSION
readonly BUNDLE_FILENAME="tinypilot-${TIMESTAMP}-${TINYPILOT_VERSION}.tar"

# Enter working directory to set up the bundleâ€™s inner structure.
pushd "${BUNDLE_DIR}"

# Resolve the exact name of the TinyPilot Debian package. If there is none, the
# assignment fails and the script exits with non-zero status.
TINYPILOT_DEBIAN_PACKAGE_NAME="$(ls tinypilot*.deb)"
readonly TINYPILOT_DEBIAN_PACKAGE_NAME

# Copy each Ansible role dependency into the bundle and add a version file.
for GIT_URL in $REPO_ANSIBLE_TINYPILOT $REPO_ANSIBLE_NGINX $REPO_ANSIBLE_USTREAMER
do
  git clone \
    --depth 1 \
    --branch master \
    "${GIT_URL}"
  FOLDER_NAME="$(echo "${GIT_URL}" | sed 's|https://github.com/tiny-pilot/||' | sed 's|.git||')"
  pushd "${FOLDER_NAME}"
  git rev-parse --short HEAD > VERSION
  popd
done

# Remove all `.git/` folders.
find . \
  -type d \
  -name .git \
  -prune \
  -exec rm -rf {} \;

# Leave working directory to assemble the tarball bundle.
popd

# Generate tarball bundle and meta file.
mkdir -p "${OUTPUT_DIR}"
ls -lahR "${BUNDLE_DIR}" > "${OUTPUT_DIR}/files.txt"
tar \
  --create \
  --file "${OUTPUT_DIR}/${BUNDLE_FILENAME}" \
  --directory "${BUNDLE_DIR}" \
  .
