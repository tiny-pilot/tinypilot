version: 2.1
jobs:
  check_whitespace:
    docker:
      - image: cimg/base:2020.01
    steps:
      - checkout
      - run:
          name: Check for trailing whitespace
          command: ./dev-scripts/check-trailing-whitespace
      - run:
          name: Check that all text files end in a trailing newline
          command: ./dev-scripts/check-trailing-newline
  check_bash:
    docker:
      - image: koalaman/shellcheck-alpine:v0.7.1
    steps:
      - run:
          name: Install dependencies
          command: apk add bash git openssh-client grep
      - checkout
      - run:
          name: Run static analysis on bash scripts
          command: ./dev-scripts/check-bash
  check_style:
    docker:
      - image: circleci/node:14.17.5-stretch
    steps:
      - checkout
      - run:
          name: Install dependencies
          command: npm install
      - run:
          name: Check code style
          command: ./dev-scripts/check-style
  build_python:
    docker:
      - image: cimg/python:3.7.4
    steps:
      - checkout
      - run:
          name: Create virtual environment
          command: python3 -m venv venv
      - run:
          name: Install requirements and run build script
          command: |
            . venv/bin/activate
            pip install --requirement requirements.txt
            pip install --requirement dev_requirements.txt
            ./dev-scripts/build-python
  build_javascript:
    docker:
      - image: circleci/node:14.17.5-stretch
    steps:
      - checkout
      - run:
          name: Install dependencies
          command: npm install
      - run:
          name: Run build script
          command: ./dev-scripts/build-javascript
  build_debian_package:
    docker:
      - image: cimg/base:stable
    steps:
      - checkout
      - setup_remote_docker:
          version: 20.10.11
      - run:
          name: Enable multiarch builds with QEMU
          command: |
            docker run \
              --rm \
              --privileged \
              multiarch/qemu-user-static \
              --reset \
              -p yes
      - run:
          name: Create multiarch build context
          command: docker context create builder
      - run:
          name: Create multiplatform builder
          command: |
            docker buildx create builder \
              --name builder \
              --driver docker-container \
              --use
      - run:
          name: Ensure builder has booted
          command: docker buildx inspect --bootstrap
      - run:
          name: Build docker image with .deb package
          command: |
            export TINYPILOT_VERSION="$(git rev-parse --short HEAD)"
            export PKG_VERSION="$(date '+%Y%m%d%H%M%S')"
            docker buildx build \
              --platform linux/arm/v7 \
              --build-arg TINYPILOT_VERSION \
              --build-arg PKG_VERSION \
              --target=artifact \
              --output type=local,dest=$(pwd)/releases/ \
              .
      - persist_to_workspace:
          root: ./releases
          paths:
            - "*.deb"
  build_bundle:
    docker:
      - image: cimg/python:3.7.4
    steps:
      - checkout
      - attach_workspace:
          at: ./bundler/bundle/
      - run:
          name: Install dependencies
          command: sudo apt-get update && sudo apt-get install -y git
      - run:
          name: Create the bundle
          command: cd bundler && ./create-bundle
      - store_artifacts:
          path: bundler/dist/files.txt
      - persist_to_workspace:
          root: ./bundler
          paths:
            - ./dist
  verify_bundle:
    docker:
      - image: cimg/base:2020.01
    steps:
      - checkout
      - attach_workspace:
          at: ./
      - run:
          name: Verify bundle integrity
          command: ./bundler/verify-bundle
  upload_bundle:
    docker:
      - image: cimg/base:2020.01
    environment:
      UPLOAD_PREFIX: community
    steps:
      - attach_workspace:
          at: ./
      - run:
          # The LATEST file contains the filename of the latest TinyPilot
          # bundle.
          name: Create LATEST file
          command: cd dist && ls tinypilot*.tgz | tee LATEST
      - run:
          name: Download Backblaze CLI tool
          command: |
            sudo apt-get update && sudo apt-get install -y wget
            wget https://github.com/Backblaze/B2_Command_Line_Tool/releases/download/v3.4.0/b2-linux --output-document=./b2
            chmod +x ./b2
            ./b2 version
      - run:
          name: Authorize Backblaze CLI tool
          command: |
            set -u
            ./b2 authorize-account "${BACKBLAZE_KEY_ID}" "${BACKBLAZE_KEY}"
      - run:
          name: Upload bundle to Backblaze
          command: |
            set -u
            BUNDLE_FILENAME="$(cat dist/LATEST)"
            ./b2 upload-file \
              --noProgress \
              "${UPLOAD_BUCKET}" \
              "dist/${BUNDLE_FILENAME}" \
              "${UPLOAD_PREFIX}/${BUNDLE_FILENAME}" \
              > /dev/null # Hide output to avoid exposing bucket details in CI.
      - run:
          name: Update LATEST file to Backblaze
          command: |
            set -u
            ./b2 upload-file \
              --noProgress \
              "${UPLOAD_BUCKET}" \
              dist/LATEST \
              "${UPLOAD_PREFIX}/version-index/LATEST" \
              > /dev/null # Hide output to avoid exposing bucket details in CI.
      - run:
          name: Print friendly upload URL
          command: |
            set -u
            BUNDLE_FILENAME="$(cat dist/LATEST)"
            echo "Upload complete to https://bundles.tinypilotkvm.com/${UPLOAD_PREFIX}/${BUNDLE_FILENAME}"
  e2e:
    machine:
      image: ubuntu-2004:202010-01
    steps:
      - checkout
      - run:
          name: Run TinyPilot e2e tests
          command: ./e2e/docker-test
workflows:
  test:
    jobs:
      - check_whitespace
      - check_bash
      - check_style
      - build_python
      - build_javascript
      - build_debian_package:
          filters:
            branches:
              # TODO: Change back to `master` before we finally merge the
              # `update-overhaul` branch. (ditto below)
              only: update-overhaul
      - build_bundle:
          requires:
            - build_debian_package
          filters:
            branches:
              only: update-overhaul
      - verify_bundle:
          requires:
            - build_bundle
          filters:
            branches:
              only: update-overhaul
      - upload_bundle:
          requires:
            - verify_bundle
          filters:
            branches:
              only: update-overhaul
      - e2e:
          requires:
            - upload_bundle
          filters:
            branches:
              only: update-overhaul
