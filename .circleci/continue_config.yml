version: 2.1
parameters:
  ansible_role_changed:
    type: boolean
    default: false
jobs:
  check_whitespace:
    docker:
      - image: cimg/base:2020.01
    steps:
      - checkout
      - run:
          name: Check for trailing whitespace
          command: ./dev-scripts/check-trailing-whitespace
      - run:
          name: Check that all text files end in a trailing newline
          command: ./dev-scripts/check-trailing-newline
  check_bash:
    docker:
      - image: koalaman/shellcheck-alpine:v0.9.0
    steps:
      - run:
          name: Install dependencies
          command: apk add bash git openssh-client grep
      - checkout
      - run:
          name: Run static analysis on bash scripts
          command: ./dev-scripts/check-bash
  lint_sql:
    docker:
      - image: cimg/python:3.7.4
    steps:
      - checkout
      - run:
          name: Create virtual environment
          command: python3 -m venv venv
      - run:
          name: Install requirements and run lint script
          command: |
            . venv/bin/activate
            pip install --requirement dev_requirements.txt
            ./dev-scripts/lint-sql
  check_style:
    docker:
      - image: cimg/node:14.17.5
    steps:
      - checkout
      - run:
          name: Install dependencies
          command: npm install
      - run:
          name: Check code style
          command: ./dev-scripts/check-style
  build_python:
    docker:
      - image: cimg/python:3.7.4
    steps:
      - checkout
      - run:
          name: Create virtual environment
          command: python3 -m venv venv
      - run:
          name: Install requirements and run build script
          command: |
            . venv/bin/activate
            pip install --requirement requirements.txt
            pip install --requirement dev_requirements.txt
            ./dev-scripts/build-python
  build_javascript:
    docker:
      - image: cimg/node:14.17.5
    steps:
      - checkout
      - run:
          name: Install dependencies
          command: npm install
      - run:
          name: Run build script
          command: ./dev-scripts/build-javascript
  build_debian_package:
    docker:
      - image: cimg/base:stable
    steps:
      - checkout
      - setup_remote_docker:
          version: 20.10.11
      - run:
          name: Build Debian package
          command: ./dev-scripts/build-debian-pkg
      - run:
          name: Print Debian package contents
          command: dpkg --contents debian-pkg/releases/tinypilot*.deb
      - persist_to_workspace:
          root: ./debian-pkg/releases
          paths:
            - "*.deb"
  lint_debian_package:
    docker:
      - image: cimg/base:2022.11-22.04
    steps:
      - checkout
      - attach_workspace:
          at: ./
      - run:
          name: Update apt packages
          command: sudo apt-get update
      - run:
          name: Install lintian
          command: sudo apt-get install -y lintian=2.114.0ubuntu1
      - run:
          name: Print lintian version
          command: lintian --version
      - run:
          name: Run lintian
          command: |
            lintian \
              --check \
              --no-tag-display-limit \
              --suppress-tags-from-file .lintianignore \
              --no-cfg \
              --fail-on warning,error \
              tinypilot*.deb
  build_ansible_role:
    machine:
      image: ubuntu-2004:202010-01
    resource_class: large
    working_directory: ~/project/ansible-role
    steps:
      - unless:
          condition:
            or:
              - << pipeline.parameters.ansible_role_changed >>
              - equal: [master, << pipeline.git.branch >>]
          steps:
            - run:
                name: Skipping job because files weren't changed
                command: circleci-agent step halt
      - checkout:
          path: ~/project
      - attach_workspace:
          at: ./debian-pkgs
      - run:
          name: Add TinyPilot Debian package name as an environment variable
          command: |
            TINYPILOT_DEBIAN_PACKAGE="$(ls ./debian-pkgs/tinypilot*.deb | xargs basename)"
            echo "export TINYPILOT_DEBIAN_PACKAGE="${TINYPILOT_DEBIAN_PACKAGE}"" >> "${BASH_ENV}"
      - run:
          name: Create virtual environment
          command: python3 -m venv venv
      - run:
          name: Test role with molecule
          command: |
            . venv/bin/activate && \
            pip install --upgrade pip && \
            pip install wheel==0.34.2 && \
            pip install -r molecule/requirements.txt && \
            ansible --version && \
            molecule --version && \
            ansible-galaxy install --role-file meta/requirements.yml && \
            molecule test
  build_bundle:
    docker:
      - image: cimg/python:3.7.4
    steps:
      - checkout
      - attach_workspace:
          at: ./bundler/bundle/
      - run:
          name: Install dependencies
          command: sudo apt-get update && sudo apt-get install -y git
      - run:
          name: Create the bundle
          command: ./bundler/create-bundle
      - store_artifacts:
          path: bundler/dist/
      - persist_to_workspace:
          root: ./bundler
          paths:
            - ./dist
  verify_bundle:
    docker:
      - image: cimg/base:2020.01
    steps:
      - checkout
      - attach_workspace:
          at: ./
      - run:
          name: Verify bundle integrity
          command: ./bundler/verify-bundle
  upload_bundle:
    docker:
      - image: cimg/base:2020.01
    environment:
      UPLOAD_PREFIX: community
    steps:
      - attach_workspace:
          at: ./
      - run:
          # The LATEST file contains the filename of the latest TinyPilot
          # bundle.
          name: Create LATEST file
          command: cd dist && ls tinypilot*.tgz | tee LATEST
      - run:
          name: Download Backblaze CLI tool
          command: |
            sudo apt-get update && sudo apt-get install -y wget
            wget https://github.com/Backblaze/B2_Command_Line_Tool/releases/download/v3.4.0/b2-linux --output-document=./b2
            chmod +x ./b2
            ./b2 version
      - run:
          name: Authorize Backblaze CLI tool
          command: |
            set -u
            ./b2 authorize-account "${BACKBLAZE_KEY_ID}" "${BACKBLAZE_KEY}"
      - run:
          name: Upload bundle to Backblaze
          command: |
            set -u
            BUNDLE_FILENAME="$(cat dist/LATEST)"
            ./b2 upload-file \
              --noProgress \
              "${UPLOAD_BUCKET}" \
              "dist/${BUNDLE_FILENAME}" \
              "${UPLOAD_PREFIX}/${BUNDLE_FILENAME}" \
              > /dev/null # Hide output to avoid exposing bucket details in CI.
      - run:
          name: Update LATEST file to Backblaze
          command: |
            set -u
            ./b2 upload-file \
              --noProgress \
              "${UPLOAD_BUCKET}" \
              dist/LATEST \
              "${UPLOAD_PREFIX}/version-index/LATEST" \
              > /dev/null # Hide output to avoid exposing bucket details in CI.
      - run:
          name: Print friendly upload URL
          command: |
            set -u
            BUNDLE_FILENAME="$(cat dist/LATEST)"
            echo "Upload complete to https://bundles.tinypilotkvm.com/${UPLOAD_PREFIX}/${BUNDLE_FILENAME}"
workflows:
  test:
    jobs:
      - check_whitespace
      - check_bash
      - lint_sql
      - check_style
      - build_python
      - build_javascript
      - build_debian_package
      - lint_debian_package:
          requires:
            - build_debian_package
      - build_ansible_role:
          requires:
            - build_debian_package
      - build_bundle:
          requires:
            - build_debian_package
      - verify_bundle:
          requires:
            - build_bundle
      - upload_bundle:
          requires:
            - verify_bundle
          # Uploading a new bundle affects Gatekeeper's view of the latest
          # bundle available, so we should only do this on master.
          filters:
            branches:
              only: master
