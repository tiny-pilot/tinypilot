import tempfile
import unittest

import markers


class MarkersTest(unittest.TestCase):

    def test_reads_marker_section_content_from_file(self):
        with tempfile.NamedTemporaryFile(mode='w') as mock_file:
            mock_file.write("""Line 1
Line 2
# --- AUTOGENERATED BY TINYPILOT - START ---
Line 3
Line 4
# --- AUTOGENERATED BY TINYPILOT - END ---
Line 5
""")
            mock_file.flush()

            lines = markers.read_marker_section(mock_file.name)
            self.assertEqual(['Line 3', 'Line 4'], lines)

    def test_reads_marker_section_content_if_entire_file_is_wrapped(self):
        with tempfile.NamedTemporaryFile(mode='w') as mock_file:
            mock_file.write("""# --- AUTOGENERATED BY TINYPILOT - START ---
Line 1
Line 2
Line 3
Line 4
Line 5
# --- AUTOGENERATED BY TINYPILOT - END ---
""")
            mock_file.flush()

            lines = markers.read_marker_section(mock_file.name)
            self.assertEqual(['Line 1', 'Line 2', 'Line 3', 'Line 4', 'Line 5'], lines)

    def test_returns_empty_list_if_marker_section_is_empty(self):
        with tempfile.NamedTemporaryFile(mode='w') as mock_file:
            mock_file.write("""Line 1
# --- AUTOGENERATED BY TINYPILOT - START ---
# --- AUTOGENERATED BY TINYPILOT - END ---
Line 2
""")
            mock_file.flush()

            lines = markers.read_marker_section(mock_file.name)
            self.assertEqual([], lines)

    def test_returns_empty_list_if_no_markers_present(self):
        with tempfile.NamedTemporaryFile(mode='w') as mock_file:
            mock_file.write("""Line 1
Line 2
Line 3
Line 4
Line 5
""")
            mock_file.flush()

            lines = markers.read_marker_section(mock_file.name)
            self.assertEqual([], lines)

    def test_returns_empty_list_if_file_is_empty(self):
        with tempfile.NamedTemporaryFile(mode='w') as mock_file:
            mock_file.write('')
            mock_file.flush()

            lines = markers.read_marker_section(mock_file.name)
            self.assertEqual([], lines)
